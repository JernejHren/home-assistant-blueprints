blueprint:
  name: Predvidljivi Power Limiter (VAREN – uporabnik ima prednost)
  description: >-
    Upravljanje naprav glede na projekcijo moči in tarifo.
    - Izklop samo v tarifah 1 in 2
    - Vklop: SAMO naprave, ki jih je avtomatika izklopila
    - Ročno izklopljene naprave → ostanejo izklopljene
    - Shrani stanje v input_text helper (JSON)
    - Podpira: switch, climate, water_heater
    - Pošlje obvestilo na do 2 napravi
    - Stabilizacija: ne upošteva projekcije v prvih X sekundah 15-min intervala
  domain: automation

  input:
    tariff_1_limit:
      name: Meja tarife 1 (W)
      default: 7000
      selector:
        number:
          min: 1000
          max: 25000
          unit_of_measurement: W
    tariff_2_limit:
      name: Meja tarife 2 (W)
      default: 9000
      selector:
        number:
          min: 1000
          max: 25000
          unit_of_measurement: W
    tariff_sensor:
      name: Senzor tarife
      default: sensor.elektro_network_tariff
      selector:
        entity:
          domain: sensor
    projected_power_sensor:
      name: Projekcija 15-min (W)
      default: sensor.projected_15min_power
      selector:
        entity:
          domain: sensor
          device_class: power

    device_1_entity:
      name: 1. Naprava (varno)
      default: ""
      selector:
        entity:
          domain: [switch, climate, water_heater]
    device_2_entity:
      name: 2. Naprava
      default: ""
      selector:
        entity:
          domain: [switch, climate, water_heater]
    device_3_entity:
      name: 3. Naprava
      default: ""
      selector:
        entity:
          domain: [switch, climate, water_heater]
    device_4_entity:
      name: 4. Naprava
      default: ""
      selector:
        entity:
          domain: [switch, climate, water_heater]
    device_5_entity:
      name: 5. Naprava (kritično)
      default: ""
      selector:
        entity:
          domain: [switch, climate, water_heater]

    projection_threshold:
      name: Prag za izklop (W nad mejo)
      default: 500
      selector:
        number:
          min: 100
          max: 2000
          unit_of_measurement: W

    hysteresis:
      name: Histerezija za vklop (W pod mejo)
      default: 500
      selector:
        number:
          min: 100
          max: 2000
          unit_of_measurement: W

    min_off_time:
      name: Minimalni čas izklopa (minute)
      default: 15
      selector:
        number:
          min: 1
          max: 720
          unit_of_measurement: min

    off_devices_helper:
      name: Helper za shranjevanje izklopljenih naprav (input_text)
      description: Izberi input_text helper (npr. input_text.power_limiter_off_devices)
      selector:
        entity:
          domain: input_text

    # === OBVESTILA ===
    notify_device_1:
      name: Telefon 1 (neobvezno)
      description: Vnesi ime storitve za obvestila (npr. notify.mobile_app_iphone_janez)
      default: ""
      selector:
        text:
          multiline: false
    notify_device_2:
      name: Telefon 2 (neobvezno)
      description: Vnesi ime storitve za obvestila (npr. notify.mobile_app_pixel_7)
      default: ""
      selector:
        text:
          multiline: false

    # === STABILIZACIJA ===
    projection_stabilization_delay:
      name: Stabilizacija projekcije (sekund po začetku intervala)
      description: Ne upoštevaj projekcije v prvih X sekundah 15-min intervala
      default: 60
      selector:
        number:
          min: 0
          max: 900
          unit_of_measurement: sekund

trigger:
  - platform: state
    entity_id: !input projected_power_sensor
  - platform: state
    entity_id: !input tariff_sensor

variables:
  tariff_sensor: !input tariff_sensor
  projected_power_sensor: !input projected_power_sensor
  tariff_1_limit: !input tariff_1_limit
  tariff_2_limit: !input tariff_2_limit
  projection_threshold: !input projection_threshold
  hysteresis: !input hysteresis
  min_off_time: !input min_off_time
  off_devices_store: !input off_devices_helper
  notify_device_1: !input notify_device_1
  notify_device_2: !input notify_device_2
  projection_stabilization_delay: !input projection_stabilization_delay

  devices_ordered:
    - !input device_1_entity
    - !input device_2_entity
    - !input device_3_entity
    - !input device_4_entity
    - !input device_5_entity

  seconds_into_interval: >-
    {% set interval_start = now().replace(minute=(now().minute // 15) * 15, second=0, microsecond=0) %}
    {{ (now() - interval_start).total_seconds() | int }}

action:
  - variables:
      tariff_value: "{{ states(tariff_sensor) | int(0) }}"
      projected: "{{ states(projected_power_sensor) | float(0) }}"
      limit: >-
        {% if tariff_value == 1 %}
          {{ tariff_1_limit }}
        {% elif tariff_value == 2 %}
          {{ tariff_2_limit }}
        {% else %}
          0
        {% endif %}
      devices: >-
        {% set d = [] %}
        {% for e in devices_ordered %}
          {% if e is defined and e not in [None, '', 'unknown'] %}
            {% set d = d + [e] %}
          {% endif %}
        {% endfor %}
        {{ d }}
      stored_off: >-
        {% set txt = states(off_devices_store) %}
        {% if txt in ['', '[]', 'unknown', 'unavailable', none] %}
          []
        {% else %}
          {{ txt | from_json }}
        {% endif %}
      now_iso: "{{ now().isoformat() }}"
      notifiers: >-
        {% set n = [] %}
        {% if notify_device_1 not in ['', 'unknown', none] %}
          {% set n = n + [notify_device_1] %}
        {% endif %}
        {% if notify_device_2 not in ['', 'unknown', none] %}
          {% set n = n + [notify_device_2] %}
        {% endif %}
        {{ n }}

  # --- IZKLOP ---
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ tariff_value in [1,2] }}"
          - condition: template
            value_template: "{{ projected > (limit + projection_threshold) }}"
          - condition: template
            value_template: "{{ seconds_into_interval >= projection_stabilization_delay }}"
        sequence:
          - variables:
              off_list: "{{ stored_off }}"
              turned_off: []
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - variables:
                    entity: "{{ repeat.item }}"
                    domain: "{{ entity.split('.')[0] }}"
                    state_curr: "{{ states(entity) | default('unknown') }}"
                - choose:
                    - conditions:
                        - condition: template
                          value_template: >-
                            {% if domain == 'switch' %}
                              {{ state_curr == 'on' }}
                            {% else %}
                              {{ state_curr not in ['off', 'unknown', 'unavailable'] }}
                            {% endif %}
                        - condition: template
                          value_template: "{{ entity not in (off_list | map(attribute='entity') | list) }}"
                      sequence:
                        - service: >
                            {% if domain == 'climate' %}climate.turn_off
                            {% elif domain == 'water_heater' %}water_heater.turn_off
                            {% else %}switch.turn_off{% endif %}
                          target:
                            entity_id: "{{ entity }}"
                        - delay: "00:00:01"
                        - variables:
                            state_after: "{{ states(entity) }}"
                        - choose:
                            - conditions:
                                - condition: template
                                  value_template: >-
                                    {% if domain == 'switch' %}
                                      {{ state_after == 'off' }}
                                    {% else %}
                                      {{ state_after in ['off', 'unknown', 'unavailable'] }}
                                    {% endif %}
                              sequence:
                                - variables:
                                    off_list: "{{ off_list + [{'entity': entity, 'off_since': now_iso}] }}"
                                    turned_off: "{{ turned_off + [entity] }}"
          - if:
              - condition: template
                value_template: "{{ turned_off | length > 0 }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ off_devices_store }}"
                data:
                  value: "{{ off_list | to_json }}"
              - repeat:
                  for_each: "{{ notifiers }}"
                  sequence:
                    - service: "{{ repeat.item }}"
                      data:
                        title: "Power Limiter — IZKLOP"
                        message: |
                          Izklopljene naprave:
                          {{ turned_off | join(', ') }}

                          Projekcija: {{ projected | int }} W > meja {{ limit | int }} W
                          Čas v intervalu: {{ (seconds_into_interval // 60) }}:{{ "%02d" % (seconds_into_interval % 60) }}

  # --- VKLOP ---
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ stored_off | length > 0 }}"
          - condition: template
            value_template: "{{ projected < (limit - hysteresis) }}"
        sequence:
          - variables:
              remaining: "{{ stored_off }}"
              turned_on: []
          - repeat:
              for_each: "{{ stored_off }}"
              sequence:
                - variables:
                    rec: "{{ repeat.item }}"
                    entity: "{{ rec.entity }}"
                    domain: "{{ entity.split('.')[0] }}"
                    off_since_dt: "{{ as_datetime(rec.off_since) }}"
                    minutes_off: "{{ ((now() - off_since_dt).total_seconds() / 60) | float }}"
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ minutes_off >= min_off_time }}"
                        - condition: template
                          value_template: >-
                            {% if domain == 'switch' %}
                              {{ states(entity) == 'off' }}
                            {% else %}
                              {{ states(entity) in ['off', 'unknown', 'unavailable'] }}
                            {% endif %}
                      sequence:
                        - service: >
                            {% if domain == 'climate' %}climate.turn_on
                            {% elif domain == 'water_heater' %}water_heater.turn_on
                            {% else %}switch.turn_on{% endif %}
                          target:
                            entity_id: "{{ entity }}"
                        - delay: "00:00:02"
                        - variables:
                            remaining: "{{ remaining | rejectattr('entity','equalto', entity) | list }}"
                            turned_on: "{{ turned_on + [entity] }}"
          - if:
              - condition: template
                value_template: "{{ turned_on | length > 0 }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ off_devices_store }}"
                data:
                  value: "{{ remaining | to_json }}"
              - repeat:
                  for_each: "{{ notifiers }}"
                  sequence:
                    - service: "{{ repeat.item }}"
                      data:
                        title: "Power Limiter — VKLOP"
                        message: |
                          Vklopljene naprave:
                          {{ turned_on | join(', ') }}

                          Projekcija: {{ projected | int }} W < meja {{ limit | int }} W
                          Čas v intervalu: {{ (seconds_into_interval // 60) }}:{{ "%02d" % (seconds_into_interval % 60) }}

mode: restart
